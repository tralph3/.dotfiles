#+TITLE: Emacs Config
#+AUTHOR: tralph3
#+PROPERTY: header-args :tangle init.el
#+STARTUP: showeverything

* Early Init
Here we define variables that we want emacs to read as soon as
possible. Mainly, we set variables to stop emacs from littering the
config directory with lockfiles, auto-save files, backups, or even
packages.
#+begin_src emacs-lisp :tangle early-init.el
  (setq user-emacs-directory "~/.local/share/emacs/")
  (setq user-config-directory "~/.config/emacs/")

  (setq-default startup-redirect-eln-cache user-emacs-directory)
  (setq-default create-lockfiles nil)
  (setq-default make-backup-files nil)
  (setq-default backup-inhibited t)
  (setq-default auto-save-list-file-prefix (file-name-concat user-emacs-directory "auto-saves/.saves-"))
  (setq-default custom-file (file-name-concat user-emacs-directory "custom-file"))
  (setq-default package-user-dir (file-name-concat user-emacs-directory "elpa"))
  (setq-default url-history-file (file-name-concat user-emacs-directory "url/history"))
  (setq-default lock-file-name-transforms `(("^\\(.*\\)$" "/tmp/\\1") t))
  (setq-default auto-save-default nil)

  (setq-default pgtk-wait-for-event-timeout 0)
#+end_src
** Performance
#+begin_src emacs-lisp :tangle early-init.el
  (setq-default gc-cons-threshold 100000000)
  (setq-default read-process-output-max (* 1024 1024))
#+end_src
* General Settings
These settings are just personal preference.
** User Interface
How I prefer emacs to look.
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'visual)
  (global-display-line-numbers-mode t)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (set-face-attribute 'default nil
                      :font "UbuntuMono Nerd Font Mono-13")
  (set-face-attribute 'variable-pitch nil
                      :font "Ubuntu-13")
#+end_src
** Custom File
Load the custom file
#+begin_src emacs-lisp
  (when (file-exists-p custom-file)
    (load custom-file 'noerror 'nomessage))
#+end_src
** Behavioral Settings
How I prefer emacs to behavior.
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq inhibit-startup-screen t)
  (delete-selection-mode t)
  (electric-pair-mode t)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (setq global-auto-revert-non-file-buffers t)
  (global-auto-revert-mode t)
  (setq c-default-style "stroustrup")
  (xterm-mouse-mode t)
  (setq native-comp-async-report-warnings-errors nil)
  (context-menu-mode t)
#+end_src
*** Smooth Scrolling
Make emacs scroll smoothly with a mouse, touchpad, and scroll keys.
#+begin_src emacs-lisp
  (setq-default scroll-conservatively 10000)
  (setq-default scroll-margin 5)

  (setq pixel-scroll-precision-use-momentum t)
  (setq pixel-scroll-precision-interpolate-mice t)
  (setq pixel-scroll-precision-large-scroll-height 10.0)
  (setq pixel-scroll-precision-interpolate-page t)
  (pixel-scroll-precision-mode t)

  (global-set-key (kbd "C-v") 'pixel-scroll-interpolate-down)
  (global-set-key (kbd "M-v") 'pixel-scroll-interpolate-up)
#+end_src
*** Comfort Keybindings
#+begin_src emacs-lisp
  (defun insert-blank-line-top ()
    (interactive)
    (move-beginning-of-line nil)
    (open-line 1))

  (defun insert-blank-line-bottom ()
    (interactive)
    (move-end-of-line nil)
    (open-line 1)
    (next-line 1))

  (global-set-key (kbd "M-o") 'insert-blank-line-bottom)
  (global-set-key (kbd "M-O") 'insert-blank-line-top)

  (global-set-key (kbd "M-Z") 'zap-up-to-char)
#+end_src
*** Display Size in Milimiters Workaround
My monitor doesn't seem to report proper values to get the display
size in milimiters. These values are needed to compute the size of
numerous UI elements, such as LaTeX preview images in org files. The
functions to get these values are returning 0. For this reason, I
check if they do return 0, and then redefine the
pgtk-display-monitor-attributes-list function to calculate the values
manually.

The method to calculate the milimiter dimensions has been borrowed
from the [[https://gitlab.freedesktop.org/xorg/xserver/-/blob/f08ab719df921e1269691553daf56853380fb241/randr/rrmonitor.c#L77][Xorg source code]].
#+begin_src emacs-lisp
  (if (eq (x-display-mm-width) 0)
      (progn
        (let* ((default-pixels-per-mm (/ 96.0 25.4))
               (display-mm-width (floor (+ (/ (display-pixel-width) default-pixels-per-mm) 0.5)))
               (display-mm-height (floor (+ (/ (display-pixel-height) default-pixels-per-mm) 0.5))))
          (setq display-mm-dimensions-alist `((t . (,display-mm-width . ,display-mm-height)))))

        (defun pgtk-display-monitor-attributes-list (&optional terminal)
          (let ((display-name (frame-parameter nil 'display))
                (geometry (list 0 0 (display-pixel-width terminal)
                                (display-pixel-height terminal)))
                (mm-size (list (display-mm-width terminal)
                               (display-mm-height terminal))))
            `(((name . ,display-name)
               (geometry . ,geometry)
               (workarea . ,geometry)
               (mm-size . ,mm-size)
               (scale-factor . 1.0)
               (frames . ,(frames-on-display-list terminal))
               (source . "Gdk")))))))
#+end_src
* Packages
These are the emacs packages I use.
** Setup
Here we setup the `package-archives` variable to include the [[https://melpa.org][MELPA]]
repository.
#+begin_src emacs-lisp
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
#+end_src
** All The Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+end_src
** Corfu
Corfu provides a quick popup that displays completion candidates for
whatever it is you're currently typing. It can also show documentation
next to the completions buffer for the symbol you're currently
selecting. Goes well with [[Orderless]].
#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :custom
    (corfu-auto t)
    (corfu-auto-delay 0.2)
    (corfu-auto-prefix 0)
    (corfu-min-width 60)
    (corfu-popupinfo-delay 0.5)
    (corfu-preview-current nil)
    (corfu-preselect 'prompt)
    (corfu-quit-no-match t)
    (corfu-on-exact-match 'quit)
    (corfu-cycle t)
    :config
    (corfu-popupinfo-mode)
    (global-corfu-mode))
#+end_src
*** Keybinds
Corfu by default sets up the `corfu-keymap` variable which overrides
some common keybindings. I found the defaults to be obtrusive. I
defined my own keybinds. I want the completion to appear as quickly as
possible, but I don't want it to be in the way of my typing. So, I
have bound a separate set of keys to scroll the popup, since otherwise
I would be stuck scrolling the popup when I actually wanted to scroll
the document I'm working with. I have also defined custom functions
for `TAB` and `RETURN`. `TAB` should always complete either the first
completion candidate, or any other explicitly selected
candidate. `RETURN` will only autocomplete if a candidate has been
explicitly selected. This allows me to insert a newline with `RETURN`
even if the popup is present.
#+begin_src emacs-lisp
  (defun corfu-handle-tab-completion ()
    (interactive)
    (if (>= corfu--index 0)
        (corfu-complete)
      (progn
        (setq corfu--index 0)
        (corfu-complete))))

  (defun corfu-handle-return-completion ()
    (interactive)
    (if (>= corfu--index 0)
        (corfu-complete)
      (newline)))

  (setq corfu-map (make-sparse-keymap))
  (define-key corfu-map (kbd "M-n") 'corfu-next)
  (define-key corfu-map (kbd "M-p") 'corfu-previous)
  (define-key corfu-map (kbd "TAB") 'corfu-handle-tab-completion)
  (define-key corfu-map (kbd "RET") 'corfu-handle-return-completion)
  (define-key corfu-map (kbd "M-SPC") 'corfu-insert-separator)
#+end_src
*** User Interface
I like kind-icons to be shown next to the completion
candidates. Hence, this package.
#+begin_src emacs-lisp
  (use-package kind-icon
    :ensure t
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default)
    (kind-icon-blend-background nil)
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
** Extra Programming Modes
These packages provide major modes for other programming languages
that are not included by default.
#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t)
#+end_src
** Vertico
Vertico provides a performant and minimalistic vertical completion UI
based on the default completion system. It makes it really easy to
search for functions or variables in the minibuffer. Goes well with
[[Orderless]].
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :config
    (vertico-mode)
    (vertico-mouse-mode))
#+end_src
** Magit
Magit is an interface for git.
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c g" . 'magit-status)))
#+end_src
** Orderless
Orderless is a completion style that lets you search for completions
based on keywords, in any order.
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :config
    (add-to-list 'completion-styles 'orderless))
#+end_src
** Treemacs
Treemacs provides a nice looking tree view of the working you're
currently working with. It also provides the ability to list all
symbols on a given file, and browse it that way.
#+begin_src emacs-lisp
  (defun project-open (project-root)
    (cd project-root)
    (treemacs-add-and-display-current-project-exclusively))

  (defun open-config ()
    (interactive)
    (let ((dotfiles-dir (getenv"DOTFILES_DIR")))
      (cd (file-name-concat dotfiles-dir "/.config"))
      (treemacs-select-directory)))

  (global-set-key (kbd "C-c c") 'open-config)

  (use-package treemacs
    :ensure t
    :custom
    (treemacs-read-string-input 'from-minibuffer)
    :config
    (treemacs-fringe-indicator-mode -1))
#+end_src
** Dashboard
Provides a nice dashboard on every new frame.
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :after all-the-icons
    :custom
    (dashboard-set-file-icons t)
    (dashboard-set-heading-icons t)
    (dashboard-banner-logo-title "TitoMacs")
    (dashboard-center-content t)
    (dashboard-show-shortcuts t)
    (dashboard-projects-backend 'project-el)
    (dashboard-items '((recents . 5) (projects . 5) (bookmarks . 5)))
    (dashboard-startup-banner 'logo)
    (dashboard-set-navigator t)
    (dashboard-navigator-buttons
     `(((,(all-the-icons-octicon "file-text" :height 1.0 :v-adjust 0.0)
         "Emacs Config"
         "Open the Emacs config file"
         (lambda (&rest _)
           (find-file (file-name-concat user-config-directory "README.org")))))))
    (dashboard-projects-switch-function 'project-open)
    :config
    (dashboard-setup-startup-hook))
#+end_src
** Treesitter
#+begin_src emacs-lisp
  (use-package tree-sitter
    :ensure t
    :config
    (require 'tree-sitter-langs)
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

  (use-package tree-sitter-langs
    :ensure t
    :after tree-sitter)
#+end_src
** Which Key
Which Key provides a list of possible keys to type and to which
functions they are bound when you're in the middle of typing a
key-chord. Can be useful to learn new packages or discover new
functionality.
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :custom
    (which-key-idle-delay 0.2)
    :config
    (which-key-mode))
#+end_src
** Marginalia
Adds annotations to completion candidates.
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode))
#+end_src
** Org Roam
#+begin_src emacs-lisp
  (setq zettelkasten-paths-alist '(("Main" . "~/Documents/wiki/")
                                   ("NesWiki" . "~/Documents/NesWiki/")))

  (defun switch-zettelkasten ()
    (interactive)
    (let* ((keys (mapcar #'car zettelkasten-paths-alist))
           (prompt (format "Select Zettelkasten:"))
           (key (completing-read prompt keys))
           (chosen-zettelkasten-path (cdr (assoc key zettelkasten-paths-alist))))
      (setq org-roam-directory chosen-zettelkasten-path)
      (setq org-roam-db-location (file-name-concat chosen-zettelkasten-path "org-roam.db"))
      (org-roam-db-sync)))

  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (cdr (assoc-string "Main" zettelkasten-paths-alist)))
    (org-roam-db-location (file-name-concat (cdr (assoc-string "Main" zettelkasten-paths-alist)) "org-roam.db"))
    (org-roam-capture-templates '(("d" "default" plain "%?"
                                    :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                                       "#+title: ${title}\n#+filetags: :Unfinished:")
                                    :unnarrowed t)))
    :bind
    (("C-c n f" . org-roam-node-find)
     ("C-c n s" . switch-zettelkasten)
     (:map org-mode-map
           (("C-c n i" . org-roam-node-insert)
            ("C-c n t" . org-roam-tag-add)
            ("C-c n a" . org-roam-alias-add)
            ("C-c n b" . org-roam-buffer-toggle))))
    :config
    (org-roam-db-autosync-mode t))

  (use-package org-roam-ui
    :ensure t
    :custom
    (org-roam-ui-open-on-start nil)
    (org-roam-ui-sync-theme nil))
#+end_src
** Org Superstar
#+begin_src emacs-lisp
  (use-package org-superstar
    :ensure t
    :custom
    (org-superstar-item-bullet-alist '((42 . 8226)
                                       (43 . 8226)
                                       (45 . 8211)))
    :config
    (add-hook 'org-mode-hook 'org-superstar-mode)
    (org-superstar-mode t))
#+end_src
** Org Fragtog
Org Fragtog allows me to seamlessly edit latex previews in org
documents whenever the point is over them.
#+begin_src emacs-lisp
  (use-package org-fragtog
    :ensure t
    :config
    (add-hook 'org-mode-hook 'org-fragtog-mode))
#+end_src
** Undo Tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :custom
    (undo-tree-history-directory-alist `(("." . ,(file-name-concat user-emacs-directory "undo-tree"))))
    :config
    (global-undo-tree-mode))
#+end_src
* Colorscheme
:PROPERTIES:
:header-args: :tangle colorscheme.el
:END:
I don't use any specific colorscheme. Instead, I have a system that
applies a certain colorscheme to many programs at once. The
colorscheme defines some variables, and each program uses these
variables in its own way. For emacs, I first need to load these
variables by loading the [[file:~/.config/colorschemes/current_colorscheme/colors.el][colors.el]] file.
#+begin_src emacs-lisp :tangle init.el
  (defun reload-colorscheme ()
    (interactive)
    (load "~/.config/colorschemes/current_colorscheme/colors.el" 'noerror 'nomessage)
    (load (file-name-concat user-config-directory "colorscheme.el") 'noerror 'nomessage)
    (treemacs-realign-icon-colors)
    (ignore-errors
      (org-roam-ui-sync-theme)))

  (define-key special-event-map [sigusr1] 'reload-colorscheme)
  (reload-colorscheme)
#+end_src
** Load faces
#+begin_src emacs-lisp
  (require 'org-faces)
  (require 'tree-sitter-hl)
#+end_src
** Basic Colors
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :foreground FOREGROUND_1
                      :background BACKGROUND_1)
  (set-face-attribute 'fringe nil
                      :foreground FOREGROUND_1
                      :background BACKGROUND_1)
  (set-face-attribute 'cursor nil
                      :foreground FOREGROUND_2)
#+end_src
** Headerline
#+begin_src emacs-lisp
  (set-face-attribute 'header-line nil
                      :background BACKGROUND_2
                      :foreground FOREGROUND_2)
#+end_src
** Modeline
#+begin_src emacs-lisp
  (set-face-attribute 'mode-line nil
                      :background BACKGROUND_2
                      :foreground FOREGROUND_2
                      :box nil)
  (set-face-attribute 'mode-line-highlight nil
                      :background HIGHLIGHT_BG
                      :foreground HIGHLIGHT_FG
                      :box nil)
  (set-face-attribute 'mode-line-inactive nil
                      :background INACTIVE)
#+end_src
** Corfu
#+begin_src emacs-lisp
  (set-face-attribute 'corfu-default nil
                      :background BACKGROUND_2
                      :foreground FOREGROUND_2)
#+end_src
** Org Mode
#+begin_src emacs-lisp
  (set-face-background 'org-block BACKGROUND_2)
  (set-face-background 'org-block-begin-line BACKGROUND_2)
  (set-face-background 'org-block-end-line BACKGROUND_2)
  (set-face-attribute 'org-level-1 nil :height 1.5 :weight 'bold)
  (set-face-attribute 'org-level-2 nil :height 1.3 :weight 'bold)
  (set-face-attribute 'org-level-3 nil :height 1.1 :weight 'bold)
  (set-face-attribute 'org-level-4 nil :weight 'normal)
  (set-face-attribute 'org-level-5 nil :weight 'normal)
  (set-face-attribute 'org-level-6 nil :weight 'normal)
  (set-face-attribute 'org-level-7 nil :weight 'normal)
  (set-face-attribute 'org-level-8 nil :weight 'normal)
#+end_src
** Org Roam UI
#+begin_src emacs-lisp
(setq org-roam-ui-custom-theme
    `((bg . ,BACKGROUND_1)
        (bg-alt . ,BACKGROUND_2)
        (fg . ,FOREGROUND_1)
        (fg-alt . ,FOREGROUND_2)
        (red . ,RED)
        (orange . ,ORANGE)
        (yellow . ,YELLOW)
        (green . ,GREEN)
        (cyan . ,CYAN)
        (blue . ,BLUE)
        (violet . ,PINK)
        (magenta . ,MAGENTA)))
#+end_src
** Programming
*** Comments
#+begin_src emacs-lisp
  (set-face-attribute 'font-lock-comment-face nil
                      :foreground COMMENT
                      :slant 'italic)
  (set-face-attribute 'font-lock-comment-delimiter-face nil
                      :inherit 'font-lock-comment-face)
  (set-face-attribute 'tree-sitter-hl-face:comment nil
                      :inherit font-lock-comment-face)
#+end_src
*** Keywords
#+begin_src emacs-lisp
  (set-face-attribute 'font-lock-keyword-face nil
                      :foreground KEYWORD)
  (set-face-attribute 'tree-sitter-hl-face:keyword nil
                      :inherit 'font-lock-keyword-face)
#+end_src
*** Operators
#+begin_src emacs-lisp
  (set-face-attribute 'font-lock-operator-face nil
                      :foreground OPERATOR)
  (set-face-attribute 'tree-sitter-hl-face:operator nil
                      :inherit 'font-lock-operator-face)
#+end_src
*** Strings
#+begin_src emacs-lisp
  (set-face-attribute 'font-lock-string-face nil
                      :foreground STRING)
  (set-face-attribute 'tree-sitter-hl-face:string nil
                      :inherit 'font-lock-string-face)
#+end_src
*** Builtins
#+begin_src emacs-lisp
  (set-face-attribute 'font-lock-builtin-face nil
                      :foreground BUILTIN)
  (set-face-attribute 'tree-sitter-hl-face:constant.builtin nil
                      :inherit 'font-lock-builtin-face)
  (set-face-attribute 'tree-sitter-hl-face:function.builtin nil
                      :inherit 'font-lock-builtin-face)
#+end_src
*** Numbers
#+begin_src emacs-lisp
  (set-face-attribute 'font-lock-number-face nil
                      :foreground NUMBER)
  (set-face-attribute 'tree-sitter-hl-face:number nil
                      :foreground NUMBER)
#+end_src
*** Variables
#+begin_src emacs-lisp
  (set-face-attribute 'font-lock-variable-use-face nil
                      :foreground VARIABLE)
  (set-face-attribute 'font-lock-variable-name-face nil
                      :foreground VARIABLE)
  (set-face-attribute 'tree-sitter-hl-face:variable nil
                      :foreground VARIABLE)
  (set-face-attribute 'tree-sitter-hl-face:variable.parameter nil
                      :inherit 'tree-sitter-hl-face:variable
                      :weight 'normal)
#+end_src
*** Functions
#+begin_src emacs-lisp
  (set-face-attribute 'font-lock-function-name-face nil
                      :foreground FUNCTION)
  (set-face-attribute 'font-lock-function-call-face nil
                      :foreground FUNCTION
                      :slant 'italic)
  (set-face-attribute 'tree-sitter-hl-face:function nil
                      :inherit 'font-lock-function-name-face)
  (set-face-attribute 'tree-sitter-hl-face:function.call nil
                      :inherit 'font-lock-function-call-face)
#+end_src
*** Methods
#+begin_src emacs-lisp
  (set-face-attribute 'tree-sitter-hl-face:method nil
                      :foreground METHOD)
  (set-face-attribute 'tree-sitter-hl-face:method.call nil
                      :slant 'italic
                      :foreground METHOD)
#+end_src
*** Classes
#+begin_src emacs-lisp
  (set-face-attribute 'tree-sitter-hl-face:constructor nil
                      :foreground CLASS)
#+end_src
*** Attributes
#+begin_src emacs-lisp
  (set-face-attribute 'tree-sitter-hl-face:property nil
                      :foreground ATTRIBUTE)
  (set-face-attribute 'tree-sitter-hl-face:attribute nil
                      :foreground ATTRIBUTE)
#+end_src
*** Parameters
#+begin_src emacs-lisp
  (set-face-attribute 'tree-sitter-hl-face:type.parameter nil
                      :foreground PARAMETER)
  (set-face-attribute 'tree-sitter-hl-face:type.argument nil
                      :foreground PARAMETER
                      :slant 'italic)
#+end_src
*** Types
#+begin_src emacs-lisp
  (set-face-attribute 'font-lock-constant-face nil
                      :foreground TYPE)
  (set-face-attribute 'tree-sitter-hl-face:type nil
                      :foreground TYPE)
  (set-face-attribute 'tree-sitter-hl-face:constant nil
                      :foreground TYPE)
#+end_src
*** Misc
#+begin_src emacs-lisp
  (set-face-attribute 'tree-sitter-hl-face:escape nil
                      :inherit 'font-lock-string
                      :foreground KEYWORD)
  (set-face-attribute 'show-paren-match nil
                      :foreground HIGHLIGHT_FG
                      :background HIGHLIGHT_BG)
#+end_src

#+begin_src emacs-lisp


  (set-face-attribute 'font-lock-doc-face nil
                      :inherit 'font-lock-comment-face)
  (set-face-attribute 'link nil
                      :foreground CYAN
                      :underline t)
  (set-face-attribute 'link-visited nil
                      :foreground MAGENTA
                      :underline t)

  (set-face-attribute 'font-lock-negation-char-face nil
                      :inherit 'font-lock-operator-face)
  (set-face-attribute 'font-lock-preprocessor-face nil
                      :foreground ORANGE)

  (set-face-attribute 'line-number nil
                      :foreground COMMENT)
  (set-face-attribute 'line-number-current-line nil
                      :foreground FOREGROUND_1)

  (set-face-attribute 'tree-sitter-hl-face:constant nil
                      :inherit 'font-lock-constant-face)



  (set-face-attribute 'warning nil
                      :foreground ORANGE)
  (set-face-attribute 'font-lock-warning-face nil
                      :inherit 'warning)


  (set-face-attribute 'tree-sitter-hl-face:variable.parameter nil
                      :foreground PARAMETER)
  (set-face-attribute 'region nil
                      :foreground HIGHLIGHT_FG
                      :background HIGHLIGHT_BG
                      :weight 'bold)
  (set-face-attribute 'mode-line-highlight nil
                      :foreground HIGHLIGHT_FG
                      :background HIGHLIGHT_BG)

  (set-face-attribute 'window-divider nil
                      :foreground INACTIVE)
  (set-face-attribute 'vertical-border nil
                      :foreground INACTIVE)


  (set-face-attribute 'show-paren-match nil
                      :background ACCENT)
  (set-face-attribute 'highlight nil
                      :foreground HIGHLIGHT_FG
                      :background HIGHLIGHT_BG)
  (set-face-attribute 'hl-line nil
                      :foreground HIGHLIGHT_FG
                      :background HIGHLIGHT_BG)
  (set-face-attribute 'error nil
                      :foreground RED)
  (set-face-attribute 'warning nil
                      :foreground ORANGE)
  (set-face-attribute 'tree-sitter-hl-face:label nil
                      :foreground PARAMETER)
  (set-face-attribute 'minibuffer-prompt nil
                      :foreground ACCENT)
  (set-face-attribute 'success nil
                      :foreground GREEN)
  (set-face-attribute 'compilation-error nil
                      :foreground RED)
  (set-face-attribute 'compilation-warning nil
                      :foreground ORANGE)
  (set-face-attribute 'compilation-info nil
                      :foreground BLUE)
  (set-face-attribute 'compilation-mode-line-fail nil
                      :foreground RED)
  (set-face-attribute 'compilation-mode-line-exit nil
                      :foreground GREEN)
  (set-face-attribute 'compilation-mode-line-run nil
                      :foreground ORANGE)

  (set-face-attribute 'tty-menu-disabled-face nil
                      :foreground INACTIVE
                      :background BACKGROUND_2)
  (set-face-attribute 'tty-menu-selected-face nil
                      :foreground HIGHLIGHT_FG
                      :background HIGHLIGHT_BG)
  (set-face-attribute 'tty-menu-enabled-face nil
                      :foreground FOREGROUND_2
                      :background BACKGROUND_2)
  (set-face-attribute 'treemacs-window-background-face nil
                      :background BACKGROUND_2)
  (set-face-attribute 'treemacs-hl-line-face nil
                      :background HIGHLIGHT_BG
                      :foreground HIGHLIGHT_FG)
#+end_src
* Eglot
Eglot is a minimalistic LSP client. It integrates very well with
emacs, using its built-in tools as much as possible.
#+begin_src emacs-lisp
  (require 'eglot)
  (setq eglot-autoshutdown t)
  (setq eglot-sync-connect 0)
  (define-key eglot-mode-map (kbd "C-c r") 'eglot-rename)
  (global-set-key (kbd "C-c d") 'xref-find-definitions)
  (global-set-key (kbd "C-c h") 'eldoc)
  (global-set-key (kbd "C-c b") 'xref-go-back)
  (global-set-key (kbd "C-c R") 'xref-find-references)
  (add-hook 'prog-mode-hook 'eglot-ensure)
#+end_src
* Org Mode
** General Settings
#+begin_src emacs-lisp
  (require 'org-tempo)
  (setq org-startup-indented t)
  (setq org-pretty-entities t)
  (setq org-hide-emphasis-markers t)
  (setq org-startup-with-inline-images t)
  (setq org-preview-latex-default-process 'dvisvgm)
  (setq org-preview-latex-image-directory "~/.cache/ltximg")
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.4))
  (setq org-startup-with-latex-preview t)
#+end_src
* Doc View Mode
** General Settings
#+begin_src emacs-lisp
  (add-hook 'doc-view-mode-hook (lambda () (display-line-numbers-mode -1)))
  (add-hook 'doc-view-mode-hook (lambda () (pixel-scroll-precision-mode -1)))
  (setq doc-view-scale-internally t)
  (setq doc-view-continuous t)
#+end_src
