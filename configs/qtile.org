#+TITLE: Qtile Config
#+AUTHOR: tralph3
#+PROPERTY: header-args :noweb yes :mkdirp yes :tangle ~/.config/qtile/config.py

* Imports
#+begin_src python
  import os
  import subprocess

  from libqtile import hook
  from libqtile.config import Group, Match, Key, Drag, Click

  DOTFILES_DIR = os.getenv("DOTFILES_DIR")

  # special dictionary that allows in-place redefinition
  class SettingsDict(dict):
      def extend(self, **kwargs):
          new_dict = self.copy()
          for key in kwargs:
              new_dict[key] = kwargs[key]
          return new_dict
#+end_src

* Colors
#+begin_src python
  BASE00 = "#<<base(i="00")>>"
  BASE01 = "#<<base(i="01")>>"
  BASE02 = "#<<base(i="02")>>"
  BASE03 = "#<<base(i="03")>>"
  BASE04 = "#<<base(i="04")>>"
  BASE05 = "#<<base(i="05")>>"
  BASE06 = "#<<base(i="06")>>"
  BASE07 = "#<<base(i="07")>>"
  BASE08 = "#<<base(i="08")>>"
  BASE09 = "#<<base(i="09")>>"
  BASE0A = "#<<base(i="0A")>>"
  BASE0B = "#<<base(i="0B")>>"
  BASE0C = "#<<base(i="0C")>>"
  BASE0D = "#<<base(i="0D")>>"
  BASE0E = "#<<base(i="0E")>>"
  BASE0F = "#<<base(i="0F")>>"
#+end_src
* Groups
#+begin_src python
  from libqtile.config import Group, Match

  groups = [
      Group("1"),
      Group("2", matches=[Match(wm_class=["firefox"])]),
      Group("3"),
      Group("4"),
      Group("5", matches=[
          Match(wm_class=["Steam", "steamwebhelper"]),
          Match(wm_class=["Lutris"]),
          Match(wm_class=["gamescope"]),
          Match(wm_class=["bottles"]),
      ]),
      Group("6", matches=[Match(wm_class=["discord"])]),
      Group("7", matches=[
          Match(wm_class=["deadbeef"]),
          Match(wm_class=["Quodlibet"]),
      ]),
      Group("8"),
      Group("9"),
  ]
#+end_src

* Keybinds
#+begin_src python
  from libqtile.lazy import lazy
  from libqtile.config import Key, Drag, Click

  DOTFILES_DIR = os.getenv('DOTFILES_DIR')

  volume_step = 5
  brightness_step = 5

  commands = dict(
      terminal="alacritty",
      emacs="emacs",
      change_color=f"sh {DOTFILES_DIR}/scripts/change_colorscheme.sh",
      raise_volume=f"sh {DOTFILES_DIR}/scripts/audio.sh raise {volume_step}",
      lower_volume=f"sh {DOTFILES_DIR}/scripts/audio.sh lower {volume_step}",
      calculator="speedcrunch",
      play_pause_audio="playerctl play-pause",
      stop_audio="playerctl stop",
      next_audio="playerctl next",
      prev_audio="playerctl previous",
      kill_window="xkill",
      decode_qr="sh -c \"flameshot gui --raw | zbarimg --raw - | xclip -selection clipboard\"",
      switch_audio_sink=f"sh {DOTFILES_DIR}/scripts/audio.sh switch_sink",
      toggle_mute=f"sh {DOTFILES_DIR}/scripts/audio.sh mute",
      toggle_mute_mic="amixer set Capture toggle",
      rofi="rofi -show drun",
      firefox="firefox",
      firefox_private="firefox --private-window",
      flameshot="flameshot gui",
      poweroff="poweroff",
      reboot="reboot",
      brightness_up=f"sh {DOTFILES_DIR}/scripts/brightness.sh raise {brightness_step}",
      brightness_down=f"sh {DOTFILES_DIR}/scripts/brightness.sh lower {brightness_step}",
  )

  mod = "mod4"

  keys = [
      # Switch windows
      Key([mod], "h", lazy.layout.left(),
          desc="Move focus to left"),
      Key([mod], "l", lazy.layout.right(),
          desc="Move focus to right"),
      Key([mod], "j", lazy.layout.down(),
          desc="Move focus down"),
      Key([mod], "k", lazy.layout.up(),
          desc="Move focus up"),
      Key([mod], "space", lazy.layout.next(),
          desc="Move window focus to other window"),

      # Move windows
      Key([mod, "shift"], "h", lazy.layout.shuffle_left(),
          desc="Move window to the left"),
      Key([mod, "shift"], "l", lazy.layout.shuffle_right(),
          desc="Move window to the right"),
      Key([mod, "shift"], "j", lazy.layout.shuffle_down(),
          desc="Move window down"),
      Key([mod, "shift"], "k", lazy.layout.shuffle_up(),
          desc="Move window up"),

      # Resize windows
      Key([mod, "control"], "h", lazy.layout.grow_left(),
          desc="Grow window to the left"),
      Key([mod, "control"], "l", lazy.layout.grow_right(),
          desc="Grow window to the right"),
      Key([mod, "control"], "j", lazy.layout.grow_down(),
          desc="Grow window down"),
      Key([mod, "control"], "k", lazy.layout.grow_up(),
          desc="Grow window up"),
      Key([mod], "n", lazy.layout.normalize(),
          desc="Reset all window sizes"),

      Key([mod], "Tab", lazy.screen.toggle_group(),
          desc="Go to previous group"),

      # Audio
      Key([], "XF86AudioRaiseVolume", lazy.spawn(commands["raise_volume"]),
          desc="Turn volume up"),
      Key([], "XF86AudioLowerVolume", lazy.spawn(commands["lower_volume"]),
          desc="Turn volume down"),
      Key([], "XF86AudioMute", lazy.spawn(commands["toggle_mute"]),
          desc="Mute volume"),
      Key([], "XF86AudioMicMute", lazy.spawn(commands["toggle_mute_mic"]),
          desc="Mute microphone"),
      Key([], "XF86AudioPlay", lazy.spawn(commands["play_pause_audio"]),
          desc="Toggle play and pause"),
      Key([], "XF86AudioStop", lazy.spawn(commands["stop_audio"]),
          desc="Stops the audio"),
      Key([], "XF86AudioNext", lazy.spawn(commands["next_audio"]),
          desc="Goes to the next track"),
      Key([], "XF86AudioPrev", lazy.spawn(commands["prev_audio"]),
          desc="Goes to the previous track"),
      Key([mod], "a", lazy.spawn(commands["switch_audio_sink"]),
          desc="Switch audio sink"),

      # Terminal
      Key([mod], "Return", lazy.spawn(commands["terminal"]),
          desc="Launch terminal"),

      # Emacs
      Key([mod], "e", lazy.spawn(commands["emacs"]),
          desc="Launch emacs client"),

      # Rofi
      Key([mod], "r", lazy.spawn(commands["rofi"]),
          desc="Spawn a rofi window"),

      # Firefox
      Key([mod], "i", lazy.spawn(commands["firefox"]),
          desc="Open Firefox"),
      Key([mod, "shift"], "i", lazy.spawn(commands["firefox_private"]),
          desc="Open Firefox in Incognito mode"),

      # Flameshot
      Key([], "Print", lazy.spawn(commands["flameshot"]),
          desc="Take screenshot"),

      # Calculator
      Key([], "XF86Calculator", lazy.spawn(commands["calculator"]),
          desc="Open calculator"),

      # Backlight
      Key([], "XF86MonBrightnessUp", lazy.spawn(commands["brightness_up"]),
          desc="Raise backlight brightness"),
      Key([], "XF86MonBrightnessDown", lazy.spawn(commands["brightness_down"]),
          desc="Lower backlight brightness"),

      Key([mod], "Q", lazy.spawn(commands["decode_qr"]),
          desc="Take screenshot of qr code and decode it"),

      # Qtile
      Key([mod, "control"], "r", lazy.reload_config(),
          desc="Reload the config"),
      Key([mod, "control"], "q", lazy.shutdown(),
          desc="Shutdown Qtile"),
      Key([mod, "control", "shift"], "q", lazy.spawn(commands["poweroff"]),
          desc="Shutdown computer"),
      Key([mod, "control", "shift"], "r", lazy.spawn(commands["reboot"]),
          desc="Reboot computer"),
      Key([mod], "f", lazy.window.toggle_fullscreen(),
          desc="Toggle fullscreen in current window"),
      Key([mod], "space", lazy.window.toggle_floating(),
          desc="Toggle floating in current window"),
      Key([mod], "w", lazy.window.kill(),
          desc="Close focused window"),
      Key([mod, "shift"], "w", lazy.spawn(commands["kill_window"]),
          desc="Force focused window"),
      Key([mod], "c", lazy.spawn(commands["change_color"]),
          desc="Change the colorscheme"),
  ]

  # Drag floating layouts.
  mouse = [
      Drag([mod], "Button1", lazy.window.set_position_floating(),
           start=lazy.window.get_position()),
      Drag([mod], "Button3", lazy.window.set_size_floating(),
           start=lazy.window.get_size()),
      Click([mod], "Button2", lazy.window.bring_to_front()),
  ]

  # swich groups
  for i in [str(x) for x in range(1, 10)]:
      keys.extend(
          [
              Key(
                  [mod],
                  i,
                  lazy.group[i].toscreen(toggle=True),
                  desc=f"Switch to group {i}",
              ),

              Key(
                  [mod, "shift"],
                  i,
                  lazy.window.togroup(i),
                  desc=f"Switch to & move focused window to group {i}",
              ),
          ]
      )
#+end_src

* Qtile Settings
#+begin_src python
  auto_fullscreen = True
  auto_minimize = True
  bring_front_click = True
  cursor_warp = False
  dgroups_app_rules = []
  focus_on_window_activation = "smart"
  follow_mouse_focus = True
  reconfigure_screens = True
  wmname = "LG3D"
#+end_src

* Status Bar
#+begin_src python
  from libqtile import bar, widget
  from libqtile.config import Screen
  from libqtile.lazy import lazy

  MARGIN = 5
  BORDER_WIDTH = 2
  ICON_SIZE = 20
  FONT = "UbuntuMono"
  FONT_SIZE = 15

  widget_default = SettingsDict(
      background=BASE00,
      border=BASE09,
      font=FONT,
      fontsize=FONT_SIZE,
      foreground=BASE05,
      highlight_method="block",
      margin=MARGIN,
      other_current_screen_border=BASE03,
      other_screen_border=BASE03,
      rounded=False,
      this_current_screen_border=BASE03,
      this_screen_border=BASE03,
      urgent_alert_method="border",
  )


  def create_separator():
      separator = widget.TextBox(
          fontsize=30,
          font=FONT,
          foreground=BASE05,
          background=BASE00,
          margin=0,
          padding=0,
          text="î‚»"
      ),
      return separator[0]


  # Status bar
  screens = [
      Screen(
          top=bar.Bar(
              [
                  # Arch logo
                  widget.Image(
                      ,**widget_default.extend(
                          mouse_callbacks={
                              "Button1": lazy.spawn(commands["rofi"])
                          },
                          filename=f"{DOTFILES_DIR}/assets/archlinux-icon.svg",
                      ),
                  ),
                  create_separator(),
                  widget.GroupBox(
                      ,**widget_default.extend(
                          disable_drag=True,
                          fontsize=ICON_SIZE,
                          margin=3,
                          active=BASE05,
                          inactive=BASE01,
                      ),
                  ),
                  # Separators
                  widget.TextBox(
                      background=BASE01,
                      fontsize=30,
                      font=FONT,
                      foreground=BASE00,
                      margin=0,
                      padding=0,
                      text="î‚¼",
                  ),
                  widget.TextBox(margin=MARGIN, background=BASE01),
                  widget.TaskList(
                      ,**widget_default.extend(
                          background=BASE01,
                          border=BASE03,
                          borderwidth=0,
                          icon_size=FONT_SIZE,
                          margin=0,
                          max_title_width=300,
                          mouse_callbacks={"Button2": lazy.window.kill()},
                          padding_x=10,
                          padding_y=5,
                          txt_floating="[F] ",
                          txt_maximized="[M] ",
                          txt_minimized="[m] ",
                      ),
                  ),
                  # Separators
                  widget.TextBox(margin=MARGIN, background=BASE01),
                  widget.TextBox(
                      background=BASE00,
                      fontsize=30,
                      font=FONT,
                      foreground=BASE01,
                      margin=0,
                      padding=0,
                      text="î‚¼",
                  ),

                  # Systray
                  widget.Systray(**widget_default),
                  create_separator(),
                  # Clock svg
                  widget.Image(
                      ,**widget_default.extend(
                          filename=f"{DOTFILES_DIR}/assets/clock.svg",
                      ),
                  ),
                  # Clock
                  widget.Clock(
                      ,**widget_default.extend(
                          format="%H:%M\n%y/%m/%d",
                          fontsize=12,
                      ),
                  ),
              ],
              size=26,
              margin=MARGIN,
              border_width=2,
              background=BASE00,
              border_color=BASE03,
          ),
          left=bar.Gap(MARGIN),
          right=bar.Gap(MARGIN),
          bottom=bar.Gap(MARGIN)
      ),
  ]
#+end_src

* Layouts
#+begin_src python
  from libqtile import layout

  layout_default = SettingsDict(
      border_focus=BASE09,
      border_focus_stack=BASE09,
      border_normal=BASE03,
      border_normal_stack=BASE03,
      border_width=BORDER_WIDTH,
      margin=MARGIN,
      margin_on_single=MARGIN,
      border_on_single=True,
      fair=True,
  )

  layouts = [
      layout.Columns(**layout_default),
  ]

  # Floating window config (different from the layout)
  floating_layout = layout.Floating(
      ,**layout_default.extend(
          float_rules=[
              ,*layout.Floating.default_float_rules,
              Match(wm_class="confirmreset"),  # gitk
              Match(wm_class="makebranch"),  # gitk
              Match(wm_class="maketag"),  # gitk
              Match(wm_class="ssh-askpass"),  # ssh-askpass
              Match(wm_class="flameshot"),  # Flameshot upload window
              Match(wm_class="pavucontrol"),  # Pulse Audio Volume Control
              Match(wm_class="helvum"),  # Volume control GUI for Pipewire
              Match(title="branchdialog"),  # gitk
              Match(title="pinentry"),  # GPG key password entry
          ],
      ),
  )
#+end_src

* Wallpaper
#+begin_src python
  import os
  import random
  from libqtile import qtile
  from typing import Callable

  WALLPAPERS_DIR = os.getenv('WALLPAPERS_DIR')
  WALLPAPER_TIMEOUT_MINUTES = 10


  class Timer():
      def __init__(self, timeout: int, callback: Callable) -> None:
          self.callback = callback
          self.timeout = timeout
          self.call()

      def call(self) -> None:
          self.callback()
          self.setup_timer()

      def setup_timer(self) -> None:
          self.timer = qtile.call_later(self.timeout, self.call)


  def set_random_wallpaper() -> None:
      wallpapers = [
          os.path.join(WALLPAPERS_DIR, x) for x in os.listdir(WALLPAPERS_DIR) if x[-4:] == ".svg"
      ]
      wallpaper = random.choice(wallpapers)
      set_wallpaper(wallpaper)


  def set_wallpaper(file_path: str) -> None:
      for screen in qtile.screens:
          screen.cmd_set_wallpaper(file_path, 'fill')


  @hook.subscribe.startup_once
  def autostart():
      subprocess.run([f"{DOTFILES_DIR}/scripts/autostart_all.sh"])


  @hook.subscribe.startup_once
  def setup_wallpaper_timer():
      Timer(WALLPAPER_TIMEOUT_MINUTES * 60, set_random_wallpaper)
#+end_src
